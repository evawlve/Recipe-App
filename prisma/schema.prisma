generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TagNamespace {
  MEAL_TYPE
  CUISINE
  DIET
  METHOD
  COURSE
  TIME
  DIFFICULTY
  OCCASION
  GOAL
}

enum TagSource {
  USER
  AUTO_CONFIDENT
  AUTO_SUGGESTED
}

/// Configure Prisma to use the seed script
// See https://www.prisma.io/docs/orm/prisma-migrate/workflows/seeding#seed-with-ts-node-or-tsx
// prisma {
//   seed = "ts-node prisma/seed.ts"
// }

model User {
  id          String       @id
  email       String       @unique
  name        String?
  role        String       @default("user")
  createdAt   DateTime     @default(now())
  avatarUrl   String?
  avatarKey   String?
  firstName   String?
  lastName    String?
  
  // NEW
  username     String?  @unique   // lowercase, 3-20, a-z0-9_
  displayName  String?           // pretty name for UI
  bio          String?

  // relations
  followedBy   Follow[] @relation("FollowedBy") // users who follow me
  following    Follow[] @relation("Following")  // users I follow
  
  collections Collection[]
  comments    Comment[]
  likes       Like[]
  recipes     Recipe[]
  notifications Notification[] @relation("NotificationUser")
  notificationsActed Notification[] @relation("NotificationActor")
  recipeViews RecipeView[]
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Recipe {
  id          String             @id @default(cuid())
  authorId    String
  title       String
  bodyMd      String
  servings    Int                @default(1)
  parentId    String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  collections CollectionRecipe[]
  comments    Comment[]
  ingredients Ingredient[]
  likes       Like[]
  nutrition   Nutrition?
  photos      Photo[]
  author      User               @relation(fields: [authorId], references: [id])
  parent      Recipe?            @relation("Forks", fields: [parentId], references: [id])
  forks       Recipe[]           @relation("Forks")
  tags        RecipeTag[]
  notifications Notification[]
  features    RecipeFeatureLite?
  views       RecipeView[]
  interactions RecipeInteractionDaily[]
}

model Ingredient {
  id       String @id @default(cuid())
  recipeId String
  name     String
  qty      Float
  unit     String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  foodMaps IngredientFoodMap[]
}

model Nutrition {
  recipeId   String   @id
  calories   Int
  proteinG   Float
  carbsG     Float
  fatG       Float
  fiberG     Float?   @default(0)
  sugarG     Float?   @default(0)
  healthScore Float?  @default(0)
  goal       String?  @default("general") // "general" | "weight_loss" | "muscle_gain" | "maintenance"
  computedAt DateTime @default(now())
  recipe     Recipe   @relation(fields: [recipeId], references: [id])
}

model Photo {
  id       String @id @default(cuid())
  recipeId String
  s3Key    String
  width    Int
  height   Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Tag {
  id        String       @id @default(cuid())
  slug      String       @unique
  label     String
  namespace TagNamespace // NEW
  recipes   RecipeTag[]
  createdAt DateTime     @default(now())
}

model RecipeTag {
  recipeId   String
  tagId      String
  source     TagSource   @default(USER) // NEW
  confidence Float       @default(1.0)  // NEW
  recipe     Recipe      @relation(fields: [recipeId], references: [id])
  tag        Tag         @relation(fields: [tagId], references: [id])

  @@id([recipeId, tagId])
}

model Comment {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  body      String
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  notifications Notification[]
}

model Like {
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, recipeId])
}

model Collection {
  id        String             @id @default(cuid())
  userId    String
  name      String
  createdAt DateTime           @default(now())
  user      User               @relation(fields: [userId], references: [id])
  recipes   CollectionRecipe[]

  @@unique([userId, name])
}

model CollectionRecipe {
  collectionId String
  recipeId     String
  addedAt      DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id])
  recipe       Recipe     @relation(fields: [recipeId], references: [id])

  @@id([collectionId, recipeId])
}

model Follow {
  followerId String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  following User @relation("FollowedBy", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String   // receiver
  actorId     String   // who triggered it
  type        String   // "follow" | "like" | "comment"
  recipeId    String?
  commentId   String?
  createdAt   DateTime @default(now())
  readAt      DateTime?
  // relations
  user   User @relation("NotificationUser", fields: [userId], references: [id], onDelete: Cascade)
  actor  User @relation("NotificationActor", fields: [actorId], references: [id], onDelete: Cascade)
  recipe Recipe? @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, readAt])
}

model Food {
  id              String   @id @default(cuid())
  name            String
  brand           String?  @db.VarChar(120)
  categoryId      String?
  source          String   @default("usda") // 'usda' | 'brand' | 'community' | 'template'
  verification    String   @default("unverified") // 'verified' | 'unverified' | 'suspect'
  densityGml      Float?   // g per ml
  
  // Per 100g nutrition values
  kcal100         Float
  protein100      Float
  carbs100        Float
  fat100          Float
  fiber100        Float?
  sugar100        Float?
  
  popularity      Int      @default(0)
  createdById     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  ingredientMaps  IngredientFoodMap[]
  units           FoodUnit[]
  barcodes        Barcode[]
  aliases         FoodAlias[]
  
  @@index([name])
  @@index([brand])
  @@index([source])
  @@unique([name, brand])
}

model FoodUnit {
  id      String  @id @default(cuid())
  foodId  String
  label   String       // e.g. "1 scoop", "1 slice"
  grams   Float        // anchor to grams
  Food    Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)
}

model Barcode {
  id      String  @id @default(cuid())
  gtin    String  @unique
  foodId  String
  Food    Food @relation(fields: [foodId], references: [id], onDelete: Cascade)
}

model IngredientFoodMap {
  id           String   @id @default(cuid())
  ingredientId String
  foodId       String
  mappedBy     String  // user id or 'auto'
  confidence   Float   @default(0.0)
  useOnce      Boolean @default(false)
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())
  
  // Relations
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  food         Food       @relation(fields: [foodId], references: [id], onDelete: Cascade)
  
  @@index([ingredientId])
  @@index([foodId])
}

model FoodAlias {
  id     String @id @default(cuid())
  foodId String
  alias  String
  
  // Relations
  food   Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)
  
  @@unique([foodId, alias])
  @@index([alias])
}

model RecipeFeatureLite {
  recipeId          String  @id
  proteinPer100kcal Float   @default(0)
  carbPer100kcal    Float   @default(0)
  fatPer100kcal     Float   @default(0)
  fiberPerServing   Float   @default(0)
  sugarPerServing   Float   @default(0)
  kcalPerServing    Float   @default(0)
  ingredientCount   Int     @default(0)
  // room for quick flags/scores if needed
  goalScores        String  @default("{}") // JSON e.g. {"pre_workout":0.72}
  methodFlags       String  @default("[]") // JSON e.g. ["air_fry","bake"]
  cuisineScores     String  @default("{}") // JSON e.g. {"mexican":0.61}
  updatedAt         DateTime @updatedAt
  recipe            Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
}

model RecipeView {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String?     // null for anonymous
  sessionId String      // anonymous or logged-in session
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([recipeId, createdAt])
  @@index([sessionId, createdAt])
}

model RecipeInteractionDaily {
  id        String   @id @default(cuid())
  recipeId  String
  day       DateTime // UTC midnight date
  views     Int      @default(0)
  likes     Int      @default(0)
  comments  Int      @default(0)
  saves     Int      @default(0)
  score     Float    @default(0) // computed
  recipe    Recipe   @relation(fields: [recipeId], references: [id])

  @@unique([recipeId, day])
  @@index([score])
}
