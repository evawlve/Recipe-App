generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id
  email       String       @unique
  name        String?
  role        String       @default("user")
  createdAt   DateTime     @default(now())
  avatarUrl   String?
  avatarKey   String?
  firstName   String?
  lastName    String?
  
  // NEW
  username     String?  @unique   // lowercase, 3-20, a-z0-9_
  displayName  String?           // pretty name for UI
  bio          String?

  // relations
  followedBy   Follow[] @relation("FollowedBy") // users who follow me
  following    Follow[] @relation("Following")  // users I follow
  
  collections Collection[]
  comments    Comment[]
  likes       Like[]
  recipes     Recipe[]
  notifications Notification[] @relation("NotificationUser")
  notificationsActed Notification[] @relation("NotificationActor")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Recipe {
  id          String             @id @default(cuid())
  authorId    String
  title       String
  bodyMd      String
  servings    Int                @default(1)
  parentId    String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  collections CollectionRecipe[]
  comments    Comment[]
  ingredients Ingredient[]
  likes       Like[]
  nutrition   Nutrition?
  photos      Photo[]
  author      User               @relation(fields: [authorId], references: [id])
  parent      Recipe?            @relation("Forks", fields: [parentId], references: [id])
  forks       Recipe[]           @relation("Forks")
  tags        RecipeTag[]
  notifications Notification[]
}

model Ingredient {
  id       String @id @default(cuid())
  recipeId String
  name     String
  qty      Float
  unit     String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Nutrition {
  recipeId   String   @id
  calories   Int
  proteinG   Float
  carbsG     Float
  fatG       Float
  computedAt DateTime @default(now())
  recipe     Recipe   @relation(fields: [recipeId], references: [id])
}

model Photo {
  id       String @id @default(cuid())
  recipeId String
  s3Key    String
  width    Int
  height   Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Tag {
  id      String      @id @default(cuid())
  slug    String      @unique
  label   String
  recipes RecipeTag[]
}

model RecipeTag {
  recipeId String
  tagId    String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])

  @@id([recipeId, tagId])
}

model Comment {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  body      String
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  notifications Notification[]
}

model Like {
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, recipeId])
}

model Collection {
  id        String             @id @default(cuid())
  userId    String
  name      String
  createdAt DateTime           @default(now())
  user      User               @relation(fields: [userId], references: [id])
  recipes   CollectionRecipe[]

  @@unique([userId, name])
}

model CollectionRecipe {
  collectionId String
  recipeId     String
  addedAt      DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id])
  recipe       Recipe     @relation(fields: [recipeId], references: [id])

  @@id([collectionId, recipeId])
}

model Follow {
  followerId String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("Following", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  following User @relation("FollowedBy", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Notification {
  id          String   @id @default(cuid())
  userId      String   // receiver
  actorId     String   // who triggered it
  type        String   // "follow" | "like" | "comment"
  recipeId    String?
  commentId   String?
  createdAt   DateTime @default(now())
  readAt      DateTime?
  // relations
  user   User @relation("NotificationUser", fields: [userId], references: [id], onDelete: Cascade)
  actor  User @relation("NotificationActor", fields: [actorId], references: [id], onDelete: Cascade)
  recipe Recipe? @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, readAt])
}
